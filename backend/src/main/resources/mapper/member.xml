<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssafy.whereismyhome.member.model.mapper.MemberMapper">

    <select id="loginMember" parameterType="String" resultType="memberDto">
        select member.memberId,
               member.emailAccount,
               member.emailDomain,
               member.password,
               member.name,
               member.age,
               member.sex,
               member.authorization,
               member.refreshToken,
               member_address.address,
               member_address.dongCode,
               member.createdTime,
               member.updatedTime
        from member
                 left join member_address
                           on member.memberId = member_address.memberId
        where member.deletedTime is null
          and member.emailAccount = #{emailAccount}
          and member.emailDomain = #{emailDomain}
    </select>

    <insert id="signUpMember" parameterType="signUpMemberRequestDto">
        insert into member (emailAccount, emailDomain, password, name, age, sex, authorization)
        values (#{emailAccount}, #{emailDomain}, #{password}, #{name}, #{age}, #{sex}, 0)
    </insert>

    <update id="updateMember" parameterType="MemberDto">
        update member
        <trim prefix="set" suffixOverrides=",">
            <if test="password != null">password = #{password},</if>
            <if test="name != null">name = #{name},</if>
            <if test="age > 0">age = #{age},</if>
            <if test="sex != null">sex = #{sex},</if>
            updatedTime = now(),
        </trim>
        where memberId = #{memberId}
    </update>

    <update id="deleteMemberById" parameterType="int">
        update member
        set updatedTime = now(),
            deletedTime = now()
        where memberId = #{memberId}
    </update>

    <select id="getMembers" resultType="memberDto">
        select member.memberId,
               member.emailAccount,
               member.emailDomain,
               member.password,
               member.name,
               member.age,
               member.sex,
               member.authorization,
               member.refreshToken,
               member_address.address,
               member_address.dongCode,
               member.createdTime,
               member.updatedTime
        from member
                 left join member_address
                           on member.memberId = member_address.memberId
        where member.deletedTime is null
        order by member.memberId
    </select>

    <select id="getMemberById" parameterType="int" resultType="memberDto">
        select member.memberId,
               member.emailAccount,
               member.emailDomain,
               member.password,
               member.name,
               member.age,
               member.sex,
               member.authorization,
               member.refreshToken,
               member_address.address,
               member_address.dongCode,
               member.createdTime,
               member.updatedTime
        from member
                 left join member_address
                           on member.memberId = member_address.memberId
        where member.deletedTime is null
          and member.memberId = #{memberId}
        order by member.memberId
    </select>

    <select id="checkEmailDuplicate" parameterType="string" resultType="int">
        select count(member.memberId)
        from member
        where member.deletedTime is null
          and member.emailAccount = #{emailAccount}
          and member.emailDomain = #{emailDomain}
    </select>

    <!-- memberId가 일치하는 유저의 RefreshToken 값을 업데이트하고 업데이트 된 시각을 현재 시각으로 변경. -->
    <update id="updateRefreshToken" parameterType="string">
        update member
        set member.refreshToken = #{refreshToken},
            member.updatedTime  = now()
        where memberId = #{memberId}
    </update>

</mapper>
